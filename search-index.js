var N=null,E="",T="t",U="u",searchIndex={};
var R=["hash_rings","Constructs a new, empty `Ring<T>`.","with_hasher","Constructs a new, empty `Ring<T>` with a specified hash…","insert_node","remove_node","get_node","Returns the node associated with a point.","Returns the number of nodes in the ring.","is_empty","Returns `true` if the ring is empty.","Returns an iterator over the ring. The iterator will yield…","Inserts a node into the ring with a number of replicas.","Removes a node and all its replicas from the ring.","Returns the node associated with a key.","Constructs a new, empty `Ring<T>` that hashes `hash_count`…","A client that uses `Ring<T>`.","Constructs a new, empty `Client<T, U>`.","Constructs a new, empty `Client<T, U>` with a specified…","get_points","Returns the points associated with a node and its replicas.","insert_point","Inserts a point into the ring and returns the node…","remove_point","Removes a point from the ring.","Inserts a node into the ring with a particular weight.","Removes a node from the ring.","hash_rings::carp","try_from","try_into","borrow_mut","hash_rings::consistent","result","type_id","hash_rings::jump","borrow","typeid","hash_rings::maglev","hash_rings::mpc","hash_rings::rendezvous","hash_rings::weighted_rendezvous","default","Client"];

searchIndex["bench"]={"doc":E,"i":[],"p":[]};
searchIndex["hash_rings"]={"doc":"hash-rings-rs","i":[[0,"carp",R[0],"Hashing ring implemented using the Cache Ring Routing…",N,N],[3,"Node",R[27],"A node with an associated weight.",N,N],[3,"Ring",E,"A hashing ring implemented using the Cache Array Routing…",N,N],[11,"new",E,"Constructs a new node with a particular weight associated…",0,[[[T],["f64"]],["self"]]],[11,"new",E,R[1],1,[[["node"],["vec",["node"]]],["self"]]],[11,R[2],E,R[3],1,[[["node"],["vec",["node"]],["h"]],["self"]]],[11,R[4],E,R[25],1,[[["self"],["node"]]]],[11,R[5],E,R[26],1,[[["self"],[T]]]],[11,R[6],E,R[7],1,[[["self"],[U]],[T]]],[11,"len",E,R[8],1,[[["self"]],["usize"]]],[11,R[9],E,R[10],1,[[["self"]],["bool"]]],[11,"iter",E,R[11],1,[[["self"]]]],[0,"consistent",R[0],"Hashing ring implemented using consistent hashing.",N,N],[3,"Ring",R[31],"A hashing ring implemented using consistent hashing.",N,N],[3,R[42],E,R[16],N,N],[11,"new",E,R[1],2,[[],["self"]]],[11,R[2],E,R[3],2,[[["h"]],["self"]]],[11,R[4],E,R[12],2,[[["self"],[T],["usize"]]]],[11,R[5],E,R[13],2,[[["self"],[T]]]],[11,R[6],E,R[7],2,[[["self"],[U]],[T]]],[11,"len",E,R[8],2,[[["self"]],["usize"]]],[11,R[9],E,R[10],2,[[["self"]],["bool"]]],[11,"iter",E,R[11],2,[[["self"]]]],[11,"new",E,R[17],3,[[],["self"]]],[11,R[2],E,R[18],3,[[["h"]],["self"]]],[11,R[4],E,R[12],3,[[["self"],[T],["usize"]]]],[11,R[5],E,R[13],3,[[["self"],[T]]]],[11,R[19],E,R[20],3,[[["self"],[T]],[[U],["vec"]]]],[11,R[6],E,R[7],3,[[["self"],[U]],[T]]],[11,R[21],E,R[22],3,[[["self"],[U]],[T]]],[11,R[23],E,R[24],3,[[["self"],[U]]]],[11,"len",E,R[8],3,[[["self"]],["usize"]]],[11,R[9],E,R[10],3,[[["self"]],["bool"]]],[11,"iter",E,R[11],3,[[["self"]]]],[0,"jump",R[0],"Hashing ring implemented using jump hashing.",N,N],[3,"Ring",R[34],"A hashing ring implemented using jump hashing.",N,N],[11,"new",E,"Constructs a new `Ring` with a specified number of nodes.",4,[[["u32"]],["self"]]],[11,R[2],E,"Constructs a new `Ring` with a specified number of nodes…",4,[[["u32"],["h"]],["self"]]],[11,R[6],E,R[14],4,[[["self"],[T]],["u32"]]],[11,"nodes",E,R[8],4,[[["self"]],["u32"]]],[0,"maglev",R[0],"Hashing ring implemented using maglev hashing.",N,N],[3,"Ring",R[37],"A hashing ring implemented using maglev hashing.",N,N],[11,"new",E,"Constructs a new `Ring<T>` with a specified list of nodes.",5,[[[T],["vec"]],["self"]]],[11,"with_capacity_hint",E,"Constructs a new `Ring<T>` with a specified list of nodes…",5,[[[T],["vec"],["usize"]],["self"]]],[11,"nodes",E,R[8],5,[[["self"]],["usize"]]],[11,"capacity",E,"Returns the capacity of the ring. If nodes are removed and…",5,[[["self"]],["usize"]]],[11,R[6],E,R[14],5,[[["self"],[U]],[T]]],[11,"iter",E,R[11],5,[[["self"]]]],[0,"mpc",R[0],"Hashing ring implemented using multi-probe consistent…",N,N],[3,"Ring",R[38],"A hashing ring implemented using multi-probe consistent…",N,N],[11,"new",E,R[15],6,[[["u64"]],["self"]]],[11,R[2],E,R[15],6,[[["u64"],["h"]],["self"]]],[11,R[4],E,R[12],6,[[["self"],[T]]]],[11,R[5],E,"Removes a node.",6,[[["self"],[T]]]],[11,R[6],E,R[7],6,[[["self"],[U]],[T]]],[11,"len",E,R[8],6,[[["self"]],["usize"]]],[11,R[9],E,R[10],6,[[["self"]],["bool"]]],[11,"iter",E,R[11],6,[[["self"]]]],[0,"rendezvous",R[0],"Hashing ring implemented using rendezvous hashing.",N,N],[3,"Ring",R[39],"A hashing ring implemented using rendezvous hashing.",N,N],[3,R[42],E,R[16],N,N],[11,"new",E,R[1],7,[[],["self"]]],[11,R[2],E,R[3],7,[[["h"]],["self"]]],[11,R[4],E,R[12],7,[[["self"],[T],["usize"]]]],[11,R[5],E,R[13],7,[[["self"],[T]]]],[11,R[6],E,R[7],7,[[["self"],[U]],[T]]],[11,"len",E,R[8],7,[[["self"]],["usize"]]],[11,R[9],E,R[10],7,[[["self"]],["bool"]]],[11,"iter",E,R[11],7,[[["self"]]]],[11,"new",E,R[17],8,[[],["self"]]],[11,R[2],E,R[18],8,[[["h"]],["self"]]],[11,R[4],E,R[12],8,[[["self"],[T],["usize"]]]],[11,R[5],E,R[13],8,[[["self"],[T]]]],[11,R[19],E,R[20],8,[[["self"],[T]],[[U],["vec"]]]],[11,R[6],E,R[7],8,[[["self"],[U]],[T]]],[11,R[21],E,R[22],8,[[["self"],[U]],[T]]],[11,R[23],E,R[24],8,[[["self"],[U]]]],[11,"len",E,R[8],8,[[["self"]],["usize"]]],[11,R[9],E,R[10],8,[[["self"]],["bool"]]],[11,"iter",E,R[11],8,[[["self"]]]],[0,"weighted_rendezvous",R[0],"Hashing ring implemented using weighted rendezvous hashing.",N,N],[3,"Ring",R[40],"A hashing ring implemented using weighted rendezvous…",N,N],[3,R[42],E,R[16],N,N],[11,"new",E,R[1],9,[[],["self"]]],[11,R[2],E,R[3],9,[[["h"]],["self"]]],[11,R[4],E,R[25],9,[[["self"],[T],["f64"]]]],[11,R[5],E,R[26],9,[[["self"],[T]]]],[11,R[6],E,R[7],9,[[["self"],[U]],[T]]],[11,"len",E,R[8],9,[[["self"]],["usize"]]],[11,R[9],E,R[10],9,[[["self"]],["bool"]]],[11,"iter",E,R[11],9,[[["self"]]]],[11,"new",E,R[17],10,[[],["self"]]],[11,R[2],E,R[18],10,[[["h"]],["self"]]],[11,R[4],E,R[25],10,[[["self"],[T],["f64"]]]],[11,R[5],E,R[26],10,[[["self"],[T]]]],[11,R[19],E,"Returns the points associated with a node.",10,[[["self"],[T]],[[U],["vec"]]]],[11,R[6],E,R[7],10,[[["self"],[U]],[T]]],[11,R[21],E,R[22],10,[[["self"],[U]],[T]]],[11,R[23],E,R[24],10,[[["self"],[U]]]],[11,"len",E,R[8],10,[[["self"]],["usize"]]],[11,R[9],E,R[10],10,[[["self"]],["bool"]]],[11,"iter",E,R[11],10,[[["self"]]]],[11,"from",R[27],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[28],E,E,0,[[[U]],[R[32]]]],[11,R[29],E,E,0,[[],[R[32]]]],[11,R[30],E,E,0,[[["self"]],[T]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[36]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[28],E,E,1,[[[U]],[R[32]]]],[11,R[29],E,E,1,[[],[R[32]]]],[11,R[30],E,E,1,[[["self"]],[T]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[R[36]]]],[11,"from",R[31],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[28],E,E,2,[[[U]],[R[32]]]],[11,R[29],E,E,2,[[],[R[32]]]],[11,R[30],E,E,2,[[["self"]],[T]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[36]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[28],E,E,3,[[[U]],[R[32]]]],[11,R[29],E,E,3,[[],[R[32]]]],[11,R[30],E,E,3,[[["self"]],[T]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[36]]]],[11,"from",R[34],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[28],E,E,4,[[[U]],[R[32]]]],[11,R[29],E,E,4,[[],[R[32]]]],[11,R[30],E,E,4,[[["self"]],[T]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[36]]]],[11,"from",R[37],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[28],E,E,5,[[[U]],[R[32]]]],[11,R[29],E,E,5,[[],[R[32]]]],[11,R[30],E,E,5,[[["self"]],[T]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[R[36]]]],[11,"from",R[38],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[28],E,E,6,[[[U]],[R[32]]]],[11,R[29],E,E,6,[[],[R[32]]]],[11,R[30],E,E,6,[[["self"]],[T]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[R[36]]]],[11,"from",R[39],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[28],E,E,7,[[[U]],[R[32]]]],[11,R[29],E,E,7,[[],[R[32]]]],[11,R[30],E,E,7,[[["self"]],[T]]],[11,R[35],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"]],[R[36]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[28],E,E,8,[[[U]],[R[32]]]],[11,R[29],E,E,8,[[],[R[32]]]],[11,R[30],E,E,8,[[["self"]],[T]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[["self"]],[R[36]]]],[11,"from",R[40],E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[28],E,E,9,[[[U]],[R[32]]]],[11,R[29],E,E,9,[[],[R[32]]]],[11,R[30],E,E,9,[[["self"]],[T]]],[11,R[35],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"]],[R[36]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[28],E,E,10,[[[U]],[R[32]]]],[11,R[29],E,E,10,[[],[R[32]]]],[11,R[30],E,E,10,[[["self"]],[T]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[["self"]],[R[36]]]],[11,R[41],R[31],E,2,[[],["self"]]],[11,R[41],E,E,3,[[],["self"]]],[11,R[41],R[39],E,7,[[],["self"]]],[11,R[41],E,E,8,[[],["self"]]],[11,R[41],R[40],E,9,[[],["self"]]],[11,R[41],E,E,10,[[],["self"]]]],"p":[[3,"Node"],[3,"Ring"],[3,"Ring"],[3,R[42]],[3,"Ring"],[3,"Ring"],[3,"Ring"],[3,"Ring"],[3,R[42]],[3,"Ring"],[3,R[42]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);